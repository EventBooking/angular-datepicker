describe('Time picker service', function () {
    beforeEach(angular.mock.module('ngDatePicker'));
    describe('format', function () {
        var timePickerService;
        beforeEach(inject(function (_timePickerService_) {
            timePickerService = _timePickerService_;
        }));
        it('allows nullable', function () {
            var result = timePickerService.format(null);
            chai.assert.equal(result, "");
        });
        it('11:00:00 -> 11:00 AM', function () {
            var result = timePickerService.format("11:00:00");
            chai.assert.equal(result, "11:00 AM");
        });
        it('13:00:00 -> 1:00 PM', function () {
            var result = timePickerService.format("13:00:00");
            chai.assert.equal(result, "1:00 PM");
        });
        it('11:00 AM -> 11:00 AM', function () {
            var result = timePickerService.format("11:00 AM");
            chai.assert.equal(result, "11:00 AM");
        });
        it('11:00 am -> 11:00 AM', function () {
            var result = timePickerService.format("11:00 am");
            chai.assert.equal(result, "11:00 AM");
        });
        it('11:00 PM -> 11:00 PM', function () {
            var result = timePickerService.format("11:00 PM");
            chai.assert.equal(result, "11:00 PM");
        });
        it('11:00 pm -> 11:00 PM', function () {
            var result = timePickerService.format("11:00 pm");
            chai.assert.equal(result, "11:00 PM");
        });
        it('2 am -> 2:00 AM', function () {
            var result = timePickerService.format("2 am");
            chai.assert.equal(result, "2:00 AM");
        });
        it('2am -> 2:00 AM', function () {
            var result = timePickerService.format("2am");
            chai.assert.equal(result, "2:00 AM");
        });
        it('2a -> 2:00 AM', function () {
            var result = timePickerService.format("2a");
            chai.assert.equal(result, "2:00 AM");
        });
        it('2 pm -> 2:00 PM', function () {
            var result = timePickerService.format("2 pm");
            chai.assert.equal(result, "2:00 PM");
        });
        it('2p -> 2:00 PM', function () {
            var result = timePickerService.format("2p");
            chai.assert.equal(result, "2:00 PM");
        });
        it('2pm -> 2:00 PM', function () {
            var result = timePickerService.format("2pm");
            chai.assert.equal(result, "2:00 PM");
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1waWNrZXItc2VydmljZS50ZXN0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3RpbWUtcGlja2VyLXNlcnZpY2UudGVzdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxDQUFDLHFCQUFxQixFQUFFO0lBRTVCLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBRWhELFFBQVEsQ0FBQyxRQUFRLEVBQUU7UUFFZixJQUFJLGlCQUFzRCxDQUFDO1FBRTNELFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBQyxtQkFBbUI7WUFDbEMsaUJBQWlCLEdBQUcsbUJBQW1CLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVKLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRTtZQUNsQixJQUFJLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDNUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHNCQUFzQixFQUFFO1lBQ3ZCLElBQUksTUFBTSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNsRCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMscUJBQXFCLEVBQUU7WUFDdEIsSUFBSSxNQUFNLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ2xELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxzQkFBc0IsRUFBRTtZQUN2QixJQUFJLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDbEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHNCQUFzQixFQUFFO1lBQ3ZCLElBQUksTUFBTSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNsRCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsc0JBQXNCLEVBQUU7WUFDdkIsSUFBSSxNQUFNLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ2xELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxzQkFBc0IsRUFBRTtZQUN2QixJQUFJLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDbEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLGlCQUFpQixFQUFFO1lBQ2xCLElBQUksTUFBTSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM5QyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsZ0JBQWdCLEVBQUU7WUFDakIsSUFBSSxNQUFNLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzdDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxlQUFlLEVBQUU7WUFDaEIsSUFBSSxNQUFNLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzVDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpQkFBaUIsRUFBRTtZQUNsQixJQUFJLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLGVBQWUsRUFBRTtZQUNoQixJQUFJLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDNUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLGdCQUFnQixFQUFFO1lBQ2pCLElBQUksTUFBTSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM3QyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7SUFFUCxDQUFDLENBQUMsQ0FBQztBQUVQLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZGVzY3JpYmUoJ1RpbWUgcGlja2VyIHNlcnZpY2UnLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICBiZWZvcmVFYWNoKGFuZ3VsYXIubW9jay5tb2R1bGUoJ25nRGF0ZVBpY2tlcicpKTtcclxuXHJcbiAgICBkZXNjcmliZSgnZm9ybWF0JywgZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciB0aW1lUGlja2VyU2VydmljZTogRGF0ZVBpY2tlck1vZHVsZS5JVGltZVBpY2tlclNlcnZpY2U7XHJcblxyXG4gICAgICAgIGJlZm9yZUVhY2goaW5qZWN0KChfdGltZVBpY2tlclNlcnZpY2VfKSA9PiB7XHJcbiAgICAgICAgICAgIHRpbWVQaWNrZXJTZXJ2aWNlID0gX3RpbWVQaWNrZXJTZXJ2aWNlXztcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIGl0KCdhbGxvd3MgbnVsbGFibGUnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRpbWVQaWNrZXJTZXJ2aWNlLmZvcm1hdChudWxsKTtcclxuICAgICAgICAgICAgY2hhaS5hc3NlcnQuZXF1YWwocmVzdWx0LCBcIlwiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICBpdCgnMTE6MDA6MDAgLT4gMTE6MDAgQU0nLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRpbWVQaWNrZXJTZXJ2aWNlLmZvcm1hdChcIjExOjAwOjAwXCIpO1xyXG4gICAgICAgICAgICBjaGFpLmFzc2VydC5lcXVhbChyZXN1bHQsIFwiMTE6MDAgQU1cIik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KCcxMzowMDowMCAtPiAxOjAwIFBNJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aW1lUGlja2VyU2VydmljZS5mb3JtYXQoXCIxMzowMDowMFwiKTtcclxuICAgICAgICAgICAgY2hhaS5hc3NlcnQuZXF1YWwocmVzdWx0LCBcIjE6MDAgUE1cIik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KCcxMTowMCBBTSAtPiAxMTowMCBBTScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGltZVBpY2tlclNlcnZpY2UuZm9ybWF0KFwiMTE6MDAgQU1cIik7XHJcbiAgICAgICAgICAgIGNoYWkuYXNzZXJ0LmVxdWFsKHJlc3VsdCwgXCIxMTowMCBBTVwiKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJzExOjAwIGFtIC0+IDExOjAwIEFNJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aW1lUGlja2VyU2VydmljZS5mb3JtYXQoXCIxMTowMCBhbVwiKTtcclxuICAgICAgICAgICAgY2hhaS5hc3NlcnQuZXF1YWwocmVzdWx0LCBcIjExOjAwIEFNXCIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgnMTE6MDAgUE0gLT4gMTE6MDAgUE0nLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRpbWVQaWNrZXJTZXJ2aWNlLmZvcm1hdChcIjExOjAwIFBNXCIpO1xyXG4gICAgICAgICAgICBjaGFpLmFzc2VydC5lcXVhbChyZXN1bHQsIFwiMTE6MDAgUE1cIik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KCcxMTowMCBwbSAtPiAxMTowMCBQTScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGltZVBpY2tlclNlcnZpY2UuZm9ybWF0KFwiMTE6MDAgcG1cIik7XHJcbiAgICAgICAgICAgIGNoYWkuYXNzZXJ0LmVxdWFsKHJlc3VsdCwgXCIxMTowMCBQTVwiKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJzIgYW0gLT4gMjowMCBBTScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGltZVBpY2tlclNlcnZpY2UuZm9ybWF0KFwiMiBhbVwiKTtcclxuICAgICAgICAgICAgY2hhaS5hc3NlcnQuZXF1YWwocmVzdWx0LCBcIjI6MDAgQU1cIik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KCcyYW0gLT4gMjowMCBBTScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGltZVBpY2tlclNlcnZpY2UuZm9ybWF0KFwiMmFtXCIpO1xyXG4gICAgICAgICAgICBjaGFpLmFzc2VydC5lcXVhbChyZXN1bHQsIFwiMjowMCBBTVwiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICBpdCgnMmEgLT4gMjowMCBBTScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGltZVBpY2tlclNlcnZpY2UuZm9ybWF0KFwiMmFcIik7XHJcbiAgICAgICAgICAgIGNoYWkuYXNzZXJ0LmVxdWFsKHJlc3VsdCwgXCIyOjAwIEFNXCIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgnMiBwbSAtPiAyOjAwIFBNJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aW1lUGlja2VyU2VydmljZS5mb3JtYXQoXCIyIHBtXCIpO1xyXG4gICAgICAgICAgICBjaGFpLmFzc2VydC5lcXVhbChyZXN1bHQsIFwiMjowMCBQTVwiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICBpdCgnMnAgLT4gMjowMCBQTScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGltZVBpY2tlclNlcnZpY2UuZm9ybWF0KFwiMnBcIik7XHJcbiAgICAgICAgICAgIGNoYWkuYXNzZXJ0LmVxdWFsKHJlc3VsdCwgXCIyOjAwIFBNXCIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgnMnBtIC0+IDI6MDAgUE0nLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRpbWVQaWNrZXJTZXJ2aWNlLmZvcm1hdChcIjJwbVwiKTtcclxuICAgICAgICAgICAgY2hhaS5hc3NlcnQuZXF1YWwocmVzdWx0LCBcIjI6MDAgUE1cIik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfSk7XHJcblxyXG59KTsiXX0=